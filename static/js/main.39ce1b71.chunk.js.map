{"version":3,"sources":["counterSlice.js","Counter.js","diagramSlice.js","networkSlice.js","Diagram.js","MatrixOutput.js","MatrixInput.js","Connection.js","Matrix.js","App.js","store.js","index.js"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","actions","selectCount","counter","styles","row","button","Counter","count","useSelector","dispatch","useDispatch","className","aria-label","onClick","diagramSlice","equipment_positions","id","x","y","moveEquipment","action","payload","movedEq","find","eq","selectDiagram","diagram","networkSlice","equipments","serial","type","model","inputs","outputs","input_interfaces","index","ip","port","protocol","output_interfaces","target_ip","target_port","multicast","connections","o_id","i_id","connect","conn","concat","disconnect","filter","c","selectNetwork","network","Diagram","containerRef","useRef","useState","firstTime","setFirstTime","firstRender","setFirstRender","diagramDispatch","useEffect","container","current","innerHTML","mxClient","isBrowserSupported","mxEvent","disableContextMenu","graph","mxGraph","mxRubberband","parent","getDefaultParent","setPanning","setTooltips","setConnectable","setEnabled","setEdgeLabelsMovable","setVertexLabelsMovable","setGridEnabled","setAllowDanglingEdges","getModel","beginUpdate","outputInterfacesById","inputInterfacesById","map","input_side_height","length","output_side_height","eq_height","Math","max","p","dummy","eqVertex","insertVertex","join","equipment","eqInputInterfacesById","input_id","input_interface","iface","n","connector","geometry","offset","mxPoint","input_iface","connectorVertex","eqOutputInterfacesById","output_id","output_interface","output_iface","output","input","insertEdge","endUpdate","addListener","CHANGE","sender","evt","getProperty","changes","change","previous","cell","constructor","child","edge","target","source","undefined","mxUtils","error","renderNetwork","ref","MatrixOutput","props","alert","JSON","stringify","MatrixInput","Connection","connected","oif","iif","Matrix","iifComponents","rows","upperCells","push","key","o","cells","App","configureStore","reducer","counterReducer","networkReducer","diagramReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.39ce1b71.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const counterSlice = createSlice({\n  name: 'diagram',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n  }\n})\n\nexport const { increment, decrement } = counterSlice.actions\nexport const selectCount = state => state.counter.value;\n\nexport default counterSlice.reducer\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  decrement,\n  increment,\n  selectCount,\n} from './counterSlice'\n//import styles from './Counter.module.css'\nconst styles = {row: '', button: ''};\n\nexport default function Counter() {\n  const count = useSelector(selectCount)\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <div>\n      <ul>\n      <li>El estado de la matriz y el digrama se corresponde</li>\n      <li>No se comprueba la validez de las conexiones</li>\n      <li>El diagrama no permite eliminar conexiones</li>\n      </ul>\n      </div>\n      <span>Prueba cambio estado</span>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      {/* omit additional rendering output here */}\n    </div>\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const diagramSlice = createSlice({\n  name: 'diagram',\n  initialState: {\n    equipment_positions:[\n      {id:1, x:30, y:20},\n      {id:2, x:250, y:90},\n      {id:3, x:250, y:20},\n    ],\n  },\n  reducers: {\n    moveEquipment: (state, action) => {\n      const {id, x, y} = action.payload\n      const movedEq = state.equipment_positions.find( eq => eq.id === id);\n      movedEq.x = x;\n      movedEq.y = y;\n    }\n  }\n})\n\nexport const { moveEquipment } = diagramSlice.actions;\nexport const selectDiagram = state => state.diagram;\n\nexport default diagramSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const networkSlice = createSlice({\n  name: 'network',\n  initialState: {\n\n    equipments: [\n      {id:1, serial:'615', type:'encoder', model:'laguna', inputs:[], outputs:[1,2]},\n      {id:2, serial:'2051', type:'decoder', model:'altum2', inputs:[1], outputs:[3,4]},\n      {id:3, serial:'211', type:'decoder', model:'xavic', inputs:[2], outputs:[5,6]},\n    ],\n    input_interfaces: [\n      {id:1, type:'input',\n             index: 0,\n             ip:'192.168.0.1', port:8000, protocol:'rtp'},\n      {id:2, type:'input',\n             index: 0,\n             ip:'192.168.0.2', port:8000, protocol:'rtp'},\n    ],\n    output_interfaces: [\n      {id:1, type:'output',\n             index: 0,\n             ip:'192.168.0.11', port:8000,\n             target_ip: '192.168.0.2', target_port:8000,\n             multicast:'false',\n             protocol:'rtp'},\n      {id:2, type:'output',\n             index: 1,\n             ip:'192.168.0.12', port:8000,\n             target_ip: '0.0.0.0', target_port:0,\n             multicast:'false',\n             protocol:'rtp'},\n      {id:3, type:'output',\n             index: 0,\n             ip:'192.168.0.13', port:8000,\n             target_ip: '0.0.0.0', target_port:0,\n             multicast:'false',\n             protocol:'rtp'},\n      {id:4, type:'output',\n             index: 1,\n             ip:'192.168.0.14', port:8000,\n             target_ip: '0.0.0.0', target_port:0,\n             multicast:'false',\n             protocol:'rtp'},\n      {id:5, type:'output',\n             index: 0,\n             ip:'192.168.0.15', port:8000,\n             target_ip: '0.0.0.0', target_port:0,\n             multicast:'false',\n             protocol:'rtp'},\n      {id:6, type:'output',\n             index: 1,\n             ip:'192.168.0.16', port:8000,\n             target_ip: '0.0.0.0', target_port:0,\n             multicast:'false',\n             protocol:'rtp'},\n    ],\n    connections: [\n      {o_id: 1, i_id: 1},\n      {o_id: 2, i_id: 2},\n    ],\n  },\n  reducers: {\n    connect: (state, action) => {\n      const conn = action.payload;\n      state.connections = state.connections.concat(conn);\n      return state;\n    },\n    disconnect: (state, action) => {\n      const conn = action.payload;\n      state.connections = state.connections.filter(c => !(c.o_id === conn.o_id && c.i_id === conn.i_id));\n      return state;\n    },\n  }\n})\n\nexport const { connect, disconnect } = networkSlice.actions;\nexport const selectNetwork = state => state.network;\n\nexport default networkSlice.reducer\n","import React, { useRef, useState, useEffect } from 'react';\n//import PropTypes from \"prop-types\";\n//import ReactDOM from \"react-dom\";\nimport {\n  mxGraph,\n  mxRubberband,\n  mxKeyHandler,\n  mxClient,\n  mxUtils,\n  mxEvent,\n  mxPoint,\n  mxEffects,\n} from \"mxgraph-js\";\n//import { black } from \"ansi-colors\";\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  selectCount,\n} from './counterSlice';\n\nimport{\n  moveEquipment,\n  selectDiagram,\n} from './diagramSlice';\n\nimport{\n  connect,\n  selectNetwork,\n} from './networkSlice';\n\nfunction renderNetwork(firstRender, network, container, diagram, diagramDispatch, count){\n            \n  if(firstRender === false){\n    container.innerHTML = '';\n  }\n  // Checks if the browser is supported\n  if (!mxClient.isBrowserSupported()) {\n    // Displays an error message if the browser is not supported.\n    mxUtils.error(\"Browser is not supported!\", 200, false);\n  } else {\n    // Disables the built-in context menu\n    mxEvent.disableContextMenu(container);\n\n    // Creates the graph inside the given container\n    var graph = new mxGraph(container);\n\n    // Enables rubberband selection\n    new mxRubberband(graph);\n\n    // Gets the default parent for inserting new cells. This is normally the first\n    // child of the root (ie. layer 0).\n    var parent = graph.getDefaultParent();\n\n    // Enables tooltips, new connections and panning\n    graph.setPanning(true);\n    graph.setTooltips(false);\n    graph.setConnectable(true);\n    graph.setEnabled(true);\n    graph.setEdgeLabelsMovable(false);\n    graph.setVertexLabelsMovable(false);\n\n    graph.setGridEnabled(false);\n    graph.setAllowDanglingEdges(false);\n\n\n    // Representacióm\n    graph.getModel().beginUpdate();\n    try {\n\n      let outputInterfacesById = [];\n      let inputInterfacesById = [];\n     \n      const equipmentVertexById = network.equipments.map( eq => {\n        const CONN_SIZE = 10;\n        const CONN_SEPARATION = 8;\n        const EQ_MIN_WIDTH = 120;\n        const EQ_MIN_HEIGHT = 3*CONN_SIZE + (3-1)*CONN_SEPARATION + CONN_SEPARATION; // Mínimo como si hubiera 3 interfaces\n\n        const input_side_height = eq.inputs.length * CONN_SIZE + (eq.inputs.length - 1)*CONN_SEPARATION;\n        const output_side_height = eq.outputs.length * CONN_SIZE + (eq.outputs.length - 1)*CONN_SEPARATION;\n        const eq_height = Math.max(EQ_MIN_HEIGHT, Math.max(input_side_height, output_side_height) + 2*CONN_SEPARATION/2);\n\n        // Frame\n        const {dummy, x, y} = diagram.equipment_positions.find( p => p.id === eq.id);\n        const eqVertex = graph.insertVertex(parent, null, [eq.type, [eq.model, eq.serial + count].join(' ')].join('\\n'), x, y, EQ_MIN_WIDTH, eq_height, 'resizable=0');\n        eqVertex.setConnectable(false);\n        eqVertex.equipment = eq;\n//        eqVertex.value = eq;\n\n        // Input interfaces\n        const eqInputInterfacesById = eq.inputs.map(input_id => {\n          const input_interface = network.input_interfaces.find( iface => iface.id === input_id);\n          const n = input_interface.index;\n          \n          const connector = graph.insertVertex(eqVertex, null, '',  0.0, ((eq_height - input_side_height)/2 + n*(CONN_SIZE + CONN_SEPARATION))/eq_height, CONN_SIZE, CONN_SIZE, '', true, 'resizable=0');\n          connector.geometry.offset = new mxPoint(-CONN_SIZE, 0);\n          connector.setConnectable(true);\n          connector.input_iface = input_interface;\n          return {id:input_interface.id, connectorVertex:connector};\n        })\n\n        inputInterfacesById = inputInterfacesById.concat(eqInputInterfacesById);\n\n        // Output interfaces\n        const eqOutputInterfacesById = eq.outputs.map(output_id => {\n          const output_interface = network.output_interfaces.find( iface => iface.id === output_id);\n          const n = output_interface.index;\n          \n          const connector = graph.insertVertex(eqVertex, null, '',  1.0, ((eq_height - output_side_height)/2 + n*(CONN_SIZE + CONN_SEPARATION))/eq_height, CONN_SIZE, CONN_SIZE, '', true, 'resizable=0');\n          connector.geometry.offset = new mxPoint(0, 0);\n          connector.setConnectable(true);\n          connector.output_iface = output_interface;\n          return {id:output_interface.id, connectorVertex:connector};\n        })\n\n        outputInterfacesById = outputInterfacesById.concat(eqOutputInterfacesById);\n\n\n        return {id:eq.id, eqVertex: eqVertex};\n      });\n\n      // Connections\n      // (blindly without any checking. Validation should be done in other place)\n      network.connections.map( c => {\n        const output = outputInterfacesById.find( iface => iface.id === c.o_id);\n        const input = inputInterfacesById.find( iface => iface.id === c.i_id);\n        if(output && input){\n          graph.insertEdge(parent, null, '', output.connectorVertex, input.connectorVertex, 'startArrow:none;endArrow=none;strokeWidth=2;strokeColor=#aaaaaa');\n          /*graph.insertEdge(parent, null, '', output.connectorVertex, input.connectorVertex, 'edgeStyle=elbowEdgeStyle;orthogonal=1;elbow=horizontal;html=1;startArrow=none;startFill=1;endArrow=none;targetPerimeterSpacing=0;sourcePerimeterSpacing=0;strokeColor=#aaaaaa;strokeWidth=2;curved=1;');*/\n        }\n      });\n\n    } finally {\n      // Updates the display\n      graph.getModel().endUpdate();\n    }\n\n    // Enables rubberband (marquee) selection and a handler for basic keystrokes\n    //var rubberband = new mxRubberband(graph);\n    //var keyHandler = new mxKeyHandler(graph);\n\n    // Cambios\n    graph.getModel().addListener(mxEvent.CHANGE, function(sender, evt)\n    {\n      evt.getProperty('edit').changes.map(change => {\n\n        if(!firstRender){\n          if(change.previous != null && change.cell.equipment){\n            // Evento de movimiento de equipo y no es de inicialización\n            diagramDispatch(moveEquipment({id: change.cell.equipment.id, x: change.geometry.x, y: change.geometry.y}));\n          }\n          else if(change.previous == null && change.constructor.name === 'mxChildChange'\n                  && change.child && change.child.edge && change.child.target && change.child.source){\n            // Evento de añadir conexión\n            let output_iface = undefined;\n            let input_iface = undefined;\n            if(change.child.target.output_iface && change.child.source.input_iface){\n              input_iface = change.child.source.input_iface;\n              output_iface = change.child.target.output_iface;\n            }\n            else if(change.child.target.input_iface && change.child.source.output_iface){\n              input_iface = change.child.target.input_iface;\n              output_iface = change.child.source.output_iface;\n            }\n\n            if(input_iface && output_iface){\n              diagramDispatch(connect({o_id:output_iface.id, i_id:input_iface.id}));\n            }\n          }\n        }\n\n      });\n    });\n  }\n}\n\nexport default function Diagram(){\n  const containerRef = useRef(null);\n  const [firstTime, setFirstTime] = useState(true);\n  const [firstRender, setFirstRender] = useState(true);\n  \n  const count = useSelector(selectCount);\n  const network = useSelector(selectNetwork);\n  const diagram = useSelector(selectDiagram);\n  const diagramDispatch = useDispatch();\n\n  useEffect(()=>{\n    if(firstTime){\n      setFirstTime(false);\n    }\n    else{\n      let container = containerRef.current;\n\n      renderNetwork(firstRender, network, container, diagram, diagramDispatch, count);\n      setFirstRender(false);\n    }\n\n\n    \n\n  },[count, firstTime, firstRender, network, diagram]);\n\n  return (\n    <div className=\"diagram\" ref={containerRef} id=\"divGraph\" />\n  )\n}\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport{\n  selectNetwork,\n} from './networkSlice';\n\nexport default function MatrixOutput(props){\n  return (\n    <span onClick={() => alert(JSON.stringify(props.iface))} className='board-cell clickable'>{props.iface.index}</span>\n  )\n}\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport{\n  selectNetwork,\n} from './networkSlice';\n\nexport default function MatrixInput(props){\n  return (\n    <span onClick={() => alert(JSON.stringify(props.iface))} className='board-cell clickable'>{props.iface.index}</span>\n  )\n}\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport{\n  connect,\n  disconnect,\n  selectNetwork,\n} from './networkSlice';\n\n\n\n\nexport default function Connection(props){\n  const dispatch = useDispatch();\n  return (\n    <div className='board-cell'>\n      <button className={'board-connection-' + (props.connected === 'true' ? 'enabled':'disabled')} onClick={\n        props.connected === 'true' ?\n        () => dispatch(disconnect({o_id:props.oif, i_id:props.iif}))\n        :\n        () => dispatch(connect({o_id:props.oif, i_id:props.iif}))\n        }>\n      </button>\n    </div>\n  )\n}\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport MatrixOutput from './MatrixOutput.js'\nimport MatrixInput from './MatrixInput.js'\nimport Connection from './Connection.js'\n\nimport {\n  selectCount,\n} from './counterSlice';\n\nimport{\n  connect,\n  disconnect,\n  selectNetwork,\n} from './networkSlice';\n\nimport styles from './App.css'\n\n/*function renderMatrix(network, container, count){\n}*/\n\nexport default function Matrix(){\n  const containerRef = useRef(null);\n  const count = useSelector(selectCount);\n  const network = useSelector(selectNetwork);\n  const dispatch = useDispatch();\n\n // const oifComponents = [];\n const iifComponents = [];\n // const connCompoents = [];\n const rows = []\n\n  //iifComponents.push(<span className='board-cell' key={12521}>Output\\Input</span>);\n  \n  const upperCells = [];\n  upperCells.push(<span key='2354' className='board-cell'></span>);\n  upperCells.push(<span key='2464312' className='board-cell'></span>);\n  network.input_interfaces.map( iif => {\n    if(iif.index == 0){\n//      const equipment = network.equipments.find(eq => eq.output_interfaces)\n      const equipment = network.equipments.find(eq => \n        eq.inputs.find(o => o === iif.id)\n      )\n      upperCells.push(<span key={'vev23257'+iif.id} className='board-cell'><div className='rotated'>{[equipment.model, equipment.serial + count].join(' ')}</div></span>);\n    }\n    else{\n      upperCells.push(<span className='board-cell'></span>);\n    }\n  });\n  rows.push(<div key={'adaeavef34wdaw'} className=\"board-row\">{upperCells}</div>);\n\n  rows.push(<div key='vsrv1' className='board-row'>{iifComponents}</div>);\n\n  iifComponents.push(<span className='board-cell' key={12520}></span>);\n  iifComponents.push(<span className='board-cell' key={12521}></span>);\n  network.input_interfaces.map( iface => {iifComponents.push(<MatrixInput key={'iif_' + iface.id} iface={iface}/>)});\n\n\n  network.output_interfaces.map( oif => {\n    const cells = [];\n\n    if(oif.index == 0){\n//      const equipment = network.equipments.find(eq => eq.output_interfaces)\n      const equipment = network.equipments.find(eq => \n        eq.outputs.find(o => o === oif.id)\n      )\n      cells.push(<span key='3253237' className='board-cell'>{[equipment.model, equipment.serial + count].join(' ')}</span>);\n    }\n    else{\n      cells.push(<span key='464kj243' className='board-cell'></span>);\n    }\n    cells.push(<MatrixOutput key={'oif_' + oif.id} iface={oif}/>);\n\n    network.input_interfaces.map( iif => {\n      const key = 'conn_' + oif.id + '_' + iif.id;\n      const connection = network.connections.find( c => c.o_id === oif.id && c.i_id === iif.id );\n\n      if(connection){\n        cells.push(<Connection key={key} connected='true' oif={oif.id} iif={iif.id} />)\n      }\n      else{\n        cells.push(<Connection key={key} connected='false' oif={oif.id} iif={iif.id} />)\n      }\n    });\n\n    rows.push(<div key={'adawdaw' + oif.id} className=\"board-row\">{cells}</div>);\n    \n  });\n\n  return (\n\n    <div className='board'ref={containerRef} id=\"divMatrix\">\n      {rows}\n    </div>\n  )\n}\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Counter from './Counter'\nimport Diagram from './Diagram'\nimport Matrix from './Matrix'\n\nfunction App() {\n  return (\n    <div>\n      <Counter/ >\n      <Diagram/ >\n      <Matrix />\n    </div>\n  );\n}\n\nexport default App;\n\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counterSlice';\nimport networkReducer from './networkSlice';\nimport diagramReducer from './diagramSlice';\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer,\n    network: networkReducer,\n    diagram: diagramReducer,\n  }\n})\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}